<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
   		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
       
	   	<!-- 加载db.properties属性文件 -->
		<context:property-placeholder location="classpath:db.properties" />
		<!-- 配置C3p0 -->
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="driverClass" value="${jdbc.driver}" />
			<property name="jdbcUrl" value="${jdbc.url}" />
			<property name="user" value="${jdbc.user}" />
			<property name="password" value="${jdbc.password}" />
			<!-- 指定连接池中保留的最大连接数. Default:15 -->
			<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
			<!-- 指定连接池中保留的最小连接数 -->
			<property name="minPoolSize" value="${jdbc.minPoolSize}" />
			<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
			<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
			<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
			<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
			<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
			<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
			<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
			<property name="maxStatements" value="${jdbc.maxStatements}" />
			<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
			<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		</bean>
       <!-- 配置sessionFactory -->
       <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
       		<!-- 引入连接池 -->
       		<property name="dataSource" ref="dataSource"/>
       		<!-- 配置方言与可选项 -->
       		<property name="hibernateProperties">
       			<props>
       				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
       				<prop key="hibernate.show_sql">true</prop>
       				<prop key="hibernate.format_sql">true</prop>
       				<prop key="hibernate.hbm2ddl.auto">update</prop>
       			</props>
       		</property>
       		<!-- 引入映射文件 -->
       		<property name="mappingResources">
       			<list>
       				<value>com/itch/user/bean/User.hbm.xml</value>
       				<value>com/itch/shop/category/bean/Category.hbm.xml</value>
       				<value>com/itch/shop/product/bean/Product.hbm.xml</value>
       				<value>com/itch/shop/categorysecond/bean/CategorySecond.hbm.xml</value>
       			</list>
       		</property>
       	
       </bean>
        <!-- 配置事务管理平台 -->
        <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        	<property name="sessionFactory" ref="sessionFactory"/>
        </bean>
        <!-- 开启事务注解扫描 -->
        <tx:annotation-driven transaction-manager="transactionManager"/>
        
       
        
        <!-- 配置首页访问action -->
        <bean id="indexAction" class="com.itch.shop.action.IndexAction" scope="prototype">
			<property name="categoryService" ref="categoryService"></property>
			<property name="productService" ref="productService"></property>
		</bean>
		
		<!-- 用户模块的action -->
		<bean id="userAction" class="com.itch.user.action.UserAction" scope="prototype">
			<property name="userService" ref="userService"></property>
		</bean>
		
		<bean id="categoryAction" class="com.itch.shop.category.action.CategoryAction" scope="prototype">
			<property name="categoryService" ref="categoryService"></property>
		</bean>
		<!-- 商品模块的action -->
		<bean id="productAction" class="com.itch.shop.product.action.ProductAction" scope="prototype">
			<property name="productService" ref="productService"></property>
			<property name="categoryService" ref="categoryService"></property>
		</bean>
		
       <!-- 配置用户模块service -->
       <bean id="userService" class="com.itch.user.service.UserServiceImpl" scope="prototype">
       		<property name="userDao" ref="userDao"></property>
       </bean>
       
       <bean id="categoryService" class="com.itch.shop.category.service.CategoryServiceImpl" >
       		<property name="categoryDao" ref="categoryDao"></property>
       </bean>
       
       <bean id="productService" class="com.itch.shop.product.service.ProductServiceImpl">
       	<property name="productDao" ref="productDao"></property>
       </bean>
       <!-- 配置用户模块dao -->
       <bean id="userDao" class="com.itch.user.dao.UserDaoImpl" scope="prototype">
       		<property name="sessionFactory" ref="sessionFactory"></property>
       </bean>
       
       <bean id="categoryDao" class="com.itch.shop.category.dao.CategoryDaoImpl">
       		<property name="sessionFactory" ref="sessionFactory"></property>
       </bean>
       
       <bean id="productDao" class="com.itch.shop.product.dao.ProducDaoImpl">
       		<property name="sessionFactory" ref="sessionFactory"></property>
       </bean>
</beans>